//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using XGame.Client.Packets;
using XGame.Client.Base.Pattern;
public class XMeditationManager : XSingleton<XMeditationManager>
{
	private uint m_expValue;
	private bool m_IsMeditationStart;

	private ulong m_initExp = 0;
	private ulong m_meditationTime = 0;

	public bool IsMeditationStart
	{
		get{ return this.m_IsMeditationStart;}
		private set{ this.m_IsMeditationStart = value;}
	}

	public uint ExpValue
	{
		private set{ this.m_expValue = value;}
		get{ return this.m_expValue;}
	}

	public XMeditationManager ()
	{
		m_expValue = 0;
		XEventManager.SP.AddHandler(MeditationCheck,EEvent.MainPlayer_EnterGame);
	}

	private void MeditationCheck(EEvent evt,params object[] s)
	{
		if(m_IsMeditationStart)
		{
			meditationStart(m_initExp,m_meditationTime);
		}
	}

	public void MeditationRequest()
	{
		if(IsMeditationStart == true)
		{
			XLogicWorld.SP.MainPlayer.EndSit();
			return;
		}

		Debug.Log("Meditatoin SceneCheck:"+ XLogicWorld.SP.SceneManager.LoadedSceneType.ToString());
		if(XLogicWorld.SP.SceneManager.LoadedSceneType != ESceneType.ClientScene && XLogicWorld.SP.SceneManager.LoadedSceneType != ESceneType.NormalScene)
		{
			XNoticeManager.SP.Notice(ENotice_Type.ENotice_Type_Operator,9921);
			return;
		}

		int stateID = XLogicWorld.SP.MainPlayer.GetCurrentStateID();
		Debug.Log(((EStateId)stateID).ToString() + ":" + stateID.ToString());
		if(stateID != (int)EStateId.esMainPlayerNone && stateID != (int)EStateId.esIdle)
		{
			XNoticeManager.SP.Notice(ENotice_Type.ENotice_Type_Operator,9920);
			return;
		}
		CS_Empty.Builder msg = CS_Empty.CreateBuilder();
		XLogicWorld.SP.NetManager.SendDataToServer((int)CS_Protocol.eCS_Meditation_RequestStart,msg.BuildParsed());
	}

	public void MeditationEndRequest()
	{
		if(!IsMeditationStart)
			return;
		CS_Empty.Builder msg = CS_Empty.CreateBuilder();
		XLogicWorld.SP.NetManager.SendDataToServer((int)CS_Protocol.eCS_Meditation_RequestEnd,msg.BuildParsed());
	}

	private void setExp(uint expValue)
	{
		//if(expValue > m_expValue)
		//{
		//	XNoticeManager.SP.Notice(ENotice_Type.ENoitce_Type_CenterTip,701,expValue);
		//	XNoticeManager.SP.Notice(ENotice_Type.ENotice_Type_Chat,701,expValue);
		//}
		this.m_expValue = expValue;
	}

	private void meditationEnd()
	{
		if(m_expValue == 0)
		{
			XNoticeManager.SP.Notice(ENotice_Type.ENotice_Type_Chat,702);
		}
		else if(m_expValue > 0)
		{
			XNoticeManager.SP.Notice(ENotice_Type.ENoitce_Type_CenterTip,505,m_expValue);
			XNoticeManager.SP.Notice(ENotice_Type.ENotice_Type_Chat,700,m_expValue);
		}
		
		XEventManager.SP.SendEvent(EEvent.Meditation_EndEvent);
		XEventManager.SP.SendEvent(EEvent.UI_Hide,EUIPanel.eMeditation);
		ExpValue = 0;
		IsMeditationStart = false;
	}

	private void meditationStart(ulong initExp, ulong meditationTime)
	{
		XEventManager.SP.SendEvent(EEvent.UI_Show,EUIPanel.eMeditation);
		XEventManager.SP.SendEvent(EEvent.Meditation_StartEvent,initExp,meditationTime);
		XLogicWorld.SP.MainPlayer.StartSit();
	}

	#region ON_SC
	public void ON_SC_MeditationStart(SC_Meditation_StartData msg)
	{
		m_initExp = msg.InitExp;
		m_meditationTime = msg.MeditationTime;
		m_IsMeditationStart = true;
		if(XLogicWorld.SP.MainPlayer.IsEnter)
		{
			meditationStart(m_initExp,m_meditationTime);
		}
	}

	public void ON_SC_MeditationEnd(SC_UInt64 msg)
	{
		uint exp = (uint)msg.Data;
		setExp (exp);
		meditationEnd();
	}

	public void ON_SC_MeditaitonUpdateExp(SC_UInt64 msg)
	{
		uint exp = (uint)msg.Data;
		setExp (exp);
		XEventManager.SP.SendEvent(EEvent.Meditation_UpdateExp,exp);
	}
	#endregion
}