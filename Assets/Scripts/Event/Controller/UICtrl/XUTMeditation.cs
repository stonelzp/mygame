//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
public class XUTMeditation : XUICtrlTemplate<XUIMeditation>
{
	public XUTMeditation ()
	{
		RegEventAgent_CheckCreated(EEvent.Meditation_StartEvent,startEventArgs);
		RegEventAgent_CheckCreated(EEvent.Meditation_UpdateExp,updateExpEventArgs);
		RegEventAgent_CheckCreated(EEvent.Meditation_EndEvent,endEventArgs);
	}

	private float m_currentColdDownTime = 0;
	private bool m_isTimerStart = false;

	public override void Breathe()
	{
		base.Breathe ();
		if(m_isTimerStart)
		{
			//Debug.Log("Meditation CurrentColdDownTime:" + XUtil.GetTimeStrByInt((int)m_currentColdDownTime,0));
			if(m_currentColdDownTime <= 0)
			{
				m_isTimerStart = false;
				return;
			}
			m_currentColdDownTime = m_currentColdDownTime - Time.smoothDeltaTime;
			SetTime(XUtil.GetTimeStrByInt((int)m_currentColdDownTime,0));
		}
	}

	public override void OnHide()
	{
		base.OnHide ();
	}

	private void TimeStart(ulong timeSeconds)
	{
		SetTime(timeSeconds.ToString());
		m_currentColdDownTime = timeSeconds;
		m_isTimerStart = true;
	}

	private void SetTime(string strTimeValue)
	{
		if(LogicUI == null)
		{
			Log.Write(LogLevel.WARN,"LogicUI is null");
		}
		LogicUI.SetTime(strTimeValue);
	}

	private void SetExpText(string strExpValue)
	{
		if(LogicUI == null)
		{
			Log.Write(LogLevel.WARN,"LogicUI is null");
		}
		LogicUI.SetRewardExp(strExpValue);
	}

	private void startEventArgs(EEvent evt,params object[] args)
	{
		ulong initExp = (ulong)args[0];
		ulong meditationTime = (ulong)args[1];
		SetExpText(initExp.ToString());
		TimeStart(meditationTime);
	}

	private void updateExpEventArgs(EEvent evt,params object[] args)
	{
		uint updateExp = (uint)args[0];
		SetExpText(updateExp.ToString());
	}

	private void endEventArgs(EEvent evt,params object[] args)
	{
		SetExpText("0");
		m_isTimerStart = false;
	}
}